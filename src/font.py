import time

# taken from
# https://github.com/blinkenrocket/firmware/tree/master/src/font.h
# format: First: number of columns, following bit representation of char
#
_char = {}
_char[32] = [0x03, 0x00, 0x00, 0x00]  # <space>
_char[33] = [0x01, 0x7D]  # !
_char[34] = [0x04, 0x30, 0x40, 0x30, 0x40]  # "
_char[35] = [0x06, 0x12, 0x3F, 0x12, 0x12, 0x3F, 0x12]  #  #
_char[36] = [0x05, 0x12, 0x2A, 0x7F, 0x2A, 0x24]  # $
_char[37] = [0x07, 0x30, 0x4A, 0x34, 0x08, 0x16, 0x29, 0x06]  # %
_char[38] = [0x05, 0x36, 0x49, 0x49, 0x49, 0x27]  # &
_char[39] = [0x01, 0x70]  # '
_char[40] = [0x03, 0x1C, 0x22, 0x41]  # (
_char[41] = [0x03, 0x41, 0x22, 0x1C]  # )
_char[42] = [0x05, 0x28, 0x10, 0x7C, 0x10, 0x28]  # *
_char[43] = [0x05, 0x08, 0x08, 0x3E, 0x08, 0x08]  # +
_char[44] = [0x02, 0x01, 0x02]  # ,
_char[45] = [0x05, 0x08, 0x08, 0x08, 0x08, 0x08]  # -
_char[46] = [0x01, 0x01]  # .
_char[47] = [0x03, 0x03, 0x1C, 0x60]  # /
_char[48] = [0x05, 0x3E, 0x45, 0x49, 0x51, 0x3E]  # 0
_char[49] = [0x03, 0x10, 0x20, 0x7F]  # 1
_char[50] = [0x05, 0x21, 0x43, 0x45, 0x49, 0x31]  # 2
_char[51] = [0x05, 0x22, 0x41, 0x49, 0x49, 0x36]  # 3
_char[52] = [0x05, 0x0C, 0x14, 0x24, 0x44, 0x7F]  # 4
_char[53] = [0x05, 0x72, 0x51, 0x51, 0x51, 0x4E]  # 5
_char[54] = [0x05, 0x3E, 0x49, 0x49, 0x49, 0x26]  # 6
_char[55] = [0x05, 0x43, 0x44, 0x48, 0x50, 0x60]  # 7
_char[56] = [0x05, 0x36, 0x49, 0x49, 0x49, 0x36]  # 8
_char[57] = [0x05, 0x32, 0x49, 0x49, 0x49, 0x3E]  # 9
_char[58] = [0x01, 0x12]  # :
_char[59] = [0x02, 0x01, 0x12]  # ;
_char[60] = [0x03, 0x08, 0x14, 0x22]  # <
_char[61] = [0x05, 0x14, 0x14, 0x14, 0x14, 0x14]  # =
_char[62] = [0x03, 0x22, 0x14, 0x08]  # >
_char[63] = [0x05, 0x20, 0x40, 0x45, 0x48, 0x30]  # ?
_char[64] = [0x07, 0x3E, 0x41, 0x49, 0x55, 0x5D, 0x45, 0x38]  # @
_char[65] = [0x05, 0x3F, 0x48, 0x48, 0x48, 0x3F]  # A
_char[66] = [0x05, 0x7F, 0x49, 0x49, 0x49, 0x36]  # B
_char[67] = [0x05, 0x3E, 0x41, 0x41, 0x41, 0x22]  # C
_char[68] = [0x05, 0x7F, 0x41, 0x41, 0x41, 0x3E]  # D
_char[69] = [0x05, 0x7F, 0x49, 0x49, 0x41, 0x41]  # E
_char[70] = [0x05, 0x7F, 0x48, 0x48, 0x40, 0x40]  # F
_char[71] = [0x05, 0x3E, 0x41, 0x41, 0x49, 0x2F]  # G
_char[72] = [0x05, 0x7F, 0x08, 0x08, 0x08, 0x7F]  # H
_char[73] = [0x01, 0x7F]  # I
_char[74] = [0x05, 0x02, 0x01, 0x01, 0x01, 0x7E]  # J
_char[75] = [0x05, 0x7F, 0x08, 0x14, 0x22, 0x41]  # K
_char[76] = [0x05, 0x7F, 0x01, 0x01, 0x01, 0x01]  # L
_char[77] = [0x07, 0x7F, 0x10, 0x08, 0x04, 0x08, 0x10, 0x7F]  # M
_char[78] = [0x05, 0x7F, 0x10, 0x08, 0x04, 0x7F]  # N
_char[79] = [0x05, 0x3E, 0x41, 0x41, 0x41, 0x3E]  # O
_char[80] = [0x05, 0x7F, 0x48, 0x48, 0x48, 0x30]  # P
_char[81] = [0x05, 0x3E, 0x41, 0x45, 0x42, 0x3D]  # Q
_char[82] = [0x05, 0x7F, 0x44, 0x44, 0x46, 0x39]  # R
_char[83] = [0x05, 0x32, 0x49, 0x49, 0x49, 0x26]  # S
_char[84] = [0x05, 0x40, 0x40, 0x7F, 0x40, 0x40]  # T
_char[85] = [0x05, 0x7E, 0x01, 0x01, 0x01, 0x7E]  # U
_char[86] = [0x05, 0x7C, 0x02, 0x01, 0x02, 0x7C]  # V
_char[87] = [0x07, 0x7E, 0x01, 0x01, 0x1E, 0x01, 0x01, 0x7E]  # W
_char[88] = [0x05, 0x63, 0x14, 0x08, 0x14, 0x63]  # X
_char[89] = [0x05, 0x60, 0x10, 0x0F, 0x10, 0x60]  # Y
_char[90] = [0x05, 0x43, 0x45, 0x49, 0x51, 0x61]  # Z
_char[91] = [0x03, 0x7F, 0x41, 0x41]  # [
_char[92] = [0x03, 0x60, 0x1C, 0x03]  # backslash
_char[93] = [0x03, 0x41, 0x41, 0x7F]  # ]
_char[94] = [0x05, 0x10, 0x20, 0x40, 0x20, 0x10]  # ^
_char[95] = [0x05, 0x01, 0x01, 0x01, 0x01, 0x01]  # _
_char[96] = [0x02, 0x40, 0x20]  # `
_char[97] = [0x05, 0x02, 0x15, 0x15, 0x15, 0x0F]  # a
_char[98] = [0x05, 0x7F, 0x11, 0x11, 0x11, 0x0E]  # b
_char[99] = [0x05, 0x0E, 0x11, 0x11, 0x11, 0x0A]  # c
_char[100] = [0x05, 0x0E, 0x11, 0x11, 0x11, 0x7F]  # d
_char[101] = [0x05, 0x0E, 0x15, 0x15, 0x15, 0x0C]  # e
_char[102] = [0x05, 0x10, 0x3F, 0x50, 0x50, 0x40]  # f
_char[103] = [0x05, 0x08, 0x15, 0x15, 0x15, 0x1E]  # g
_char[104] = [0x05, 0x7F, 0x10, 0x10, 0x10, 0x0F]  # h
_char[105] = [0x01, 0x5F]  # i
_char[106] = [0x05, 0x02, 0x01, 0x01, 0x01, 0x5E]  # j
_char[107] = [0x05, 0x7F, 0x04, 0x0C, 0x12, 0x01]  # k
_char[108] = [0x01, 0x7F]  # l
_char[109] = [0x07, 0x1F, 0x10, 0x10, 0x0C, 0x10, 0x10, 0x0F]  # m
_char[110] = [0x05, 0x1F, 0x10, 0x10, 0x10, 0x0F]  # n
_char[111] = [0x05, 0x0E, 0x11, 0x11, 0x11, 0x0E]  # o
_char[112] = [0x05, 0x0F, 0x14, 0x14, 0x14, 0x08]  # p
_char[113] = [0x05, 0x08, 0x14, 0x14, 0x14, 0x0F]  # q
_char[114] = [0x05, 0x1F, 0x04, 0x08, 0x10, 0x10]  # r
_char[115] = [0x05, 0x09, 0x15, 0x15, 0x15, 0x02]  # s
_char[116] = [0x05, 0x10, 0x3E, 0x11, 0x11, 0x01]  # t
_char[117] = [0x05, 0x1E, 0x01, 0x01, 0x01, 0x1E]  # u
_char[118] = [0x05, 0x1C, 0x02, 0x01, 0x02, 0x1C]  # v
_char[119] = [0x07, 0x1E, 0x01, 0x01, 0x02, 0x01, 0x01, 0x1E]  # w
_char[120] = [0x05, 0x11, 0x0A, 0x04, 0x0A, 0x11]  # x
_char[121] = [0x05, 0x19, 0x05, 0x05, 0x05, 0x1E]  # y
_char[122] = [0x05, 0x11, 0x13, 0x15, 0x19, 0x11]  # z
_char[123] = [0x04, 0x08, 0x36, 0x41, 0x41]  # [
_char[124] = [0x01, 0x7F]  # |
_char[125] = [0x04, 0x41, 0x41, 0x36, 0x08]  # ]
_char[126] = [0x06, 0x20, 0x40, 0x40, 0x20, 0x20, 0x40]  # ~


class TextScroller:
    def __init__(self, matrix):
        self.matrix = matrix

    def scroll_text(self, text, wait_time=0.08):
        """Scroll text with wait_time seconds between updates."""
        for ch in text:
            ascii_ch = ord(ch)
            # first entry contains length - ignoring this
            data = _char[ascii_ch][1:]

            for dat in data:
                self.matrix.scroll(fill=dat)
                self.matrix.show()
                time.sleep(wait_time)

            self.matrix.scroll()  # add some extra space
